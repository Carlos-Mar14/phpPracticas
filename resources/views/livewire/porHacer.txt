Relaciones Eloquent
Laravel proporciona un sistema de relaciones llamado Eloquent que permite modelar relaciones entre tablas de tu base de datos de manera sencilla y elegante. Esto es particularmente útil cuando tienes relaciones entre diferentes tipos de entidades en tu aplicación, como comentarios y blogs.

Ejemplo de relación
Supongamos que tenemos tres modelos: Blog, User, y Comment. Podemos establecer relaciones entre estos modelos usando Eloquent.

// Modelo Blog
public function comments()
{
    return $this->hasMany(Comment::class);
}

// Modelo User
public function comments()
{
    return $this->hasMany(Comment::class);
}
Ventajas del uso de relaciones Eloquent
Simplificación del código: En lugar de escribir múltiples consultas SQL complejas, puedes acceder a datos relacionados de forma simple.
Consistencia: Mantienes una representación coherente de tus datos en ambos lados (base de datos y código).
Eficiencia: Las relaciones Eloquent pueden optimizarse automáticamente por Laravel, lo que puede mejorar el rendimiento.
Flexibilidad: Puedes trabajar con relaciones de muchos a muchos, uno a muchos, y muchos a uno fácilmente.
Ejemplos de uso
Obtener todos los comentarios de un blog específico:
$blog = Blog::find($id);
$comments = $blog->comments;
Obtener el autor de un comentario:
$comment = Comment::find($id);
$author = $comment->user;
Crear un nuevo comentario asociado a un blog y un usuario:
$newComment = new Comment();
$newComment->blog_id = $blogId;
$newComment->user_id = $userId;
$newComment->save();
Implementación en tu caso
Para tu aplicación, podrías modificar tus modelos así:

// Modelo Comment
public function blog()
{
    return $this->belongsTo(Blog::class);
}

public function user()
{
    return $this->belongsTo(User::class);
}

// Modelo Blog
public function comments()
{
    return $this->hasMany(Comment::class);
}

// Modelo User
public function comments()
{
    return $this->hasMany(Comment::class);
}
Con estas relaciones, podrías hacer cosas como:

$blog = Blog::find($id);
$comments = $blog->comments; // Todos los comentarios del blog

$user = User::find($id);
$comments = $user->comments; // Todos los comentarios del usuario

$newComment = new Comment();
$newComment->blog_id = $blogId;
$newComment->user_id = $userId;
$newComment->save();
Beneficios para tu aplicación
Mejor organización de datos: Tus modelos reflejan las relaciones naturales de tus datos.
Facilita la creación de relaciones complejas: Puedes obtener fácilmente información relacionada, como "¿Cuántos comentarios tiene este blog?" o "¿Qué blogs ha comentado este usuario?"
Simplifica la lógica de negocio: Muchas operaciones se vuelven más simples y legibles.
Implementando estas relaciones Eloquent, tu aplicación se vuelve más robusta, mantenible y eficiente al manejar datos relacionados entre sí.